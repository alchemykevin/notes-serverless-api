{"ast":null,"code":"import \"source-map-support/register\";\nimport handler from \"./libs/handler-lib\";\nimport dynamoDb from \"./libs/dynamodb-lib\";\nexport const main = handler(async (event, context) => {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    // - 'userId': Identity Pool identity id of the authenticated user\n    // - 'noteId': path parameter\n    Key: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: event.pathParameters.id\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":attachment\": data.attachment || null,\n      \":content\": data.content || null\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\"\n  };\n  await dynamoDb.update(params);\n  return {\n    status: true\n  };\n});","map":{"version":3,"sources":["C:/Users/Tester/source/repos/notes-serverless-api/update.js"],"names":["handler","dynamoDb","main","event","context","data","JSON","parse","body","params","TableName","process","env","tableName","Key","userId","requestContext","identity","cognitoIdentityId","noteId","pathParameters","id","UpdateExpression","ExpressionAttributeValues","attachment","content","ReturnValues","update","status"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAO,MAAMC,IAAI,GAAGF,OAAO,CAAC,OAAOG,KAAP,EAAcC,OAAd,KAA0B;AACpD,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADV;AAEb;AACA;AACA;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAEZ,KAAK,CAACa,cAAN,CAAqBC,QAArB,CAA8BC,iBADnC;AAEHC,MAAAA,MAAM,EAAEhB,KAAK,CAACiB,cAAN,CAAqBC;AAF1B,KALQ;AASb;AACA;AACAC,IAAAA,gBAAgB,EAAE,kDAXL;AAYbC,IAAAA,yBAAyB,EAAE;AACzB,qBAAelB,IAAI,CAACmB,UAAL,IAAmB,IADT;AAEzB,kBAAYnB,IAAI,CAACoB,OAAL,IAAgB;AAFH,KAZd;AAgBb;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AAnBD,GAAf;AAsBA,QAAMzB,QAAQ,CAAC0B,MAAT,CAAgBlB,MAAhB,CAAN;AAEA,SAAO;AAAEmB,IAAAA,MAAM,EAAE;AAAV,GAAP;AACD,CA3B0B,CAApB","sourcesContent":["import handler from \"./libs/handler-lib\";\r\nimport dynamoDb from \"./libs/dynamodb-lib\";\r\n\r\nexport const main = handler(async (event, context) => {\r\n  const data = JSON.parse(event.body);\r\n  const params = {\r\n    TableName: process.env.tableName,\r\n    // 'Key' defines the partition key and sort key of the item to be updated\r\n    // - 'userId': Identity Pool identity id of the authenticated user\r\n    // - 'noteId': path parameter\r\n    Key: {\r\n      userId: event.requestContext.identity.cognitoIdentityId,\r\n      noteId: event.pathParameters.id\r\n    },\r\n    // 'UpdateExpression' defines the attributes to be updated\r\n    // 'ExpressionAttributeValues' defines the value in the update expression\r\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\r\n    ExpressionAttributeValues: {\r\n      \":attachment\": data.attachment || null,\r\n      \":content\": data.content || null\r\n    },\r\n    // 'ReturnValues' specifies if and how to return the item's attributes,\r\n    // where ALL_NEW returns all attributes of the item after the update; you\r\n    // can inspect 'result' below to see how it works with different settings\r\n    ReturnValues: \"ALL_NEW\"\r\n  };\r\n\r\n  await dynamoDb.update(params);\r\n\r\n  return { status: true };\r\n});"]},"metadata":{},"sourceType":"module"}